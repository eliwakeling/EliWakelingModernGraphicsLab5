// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// MODIFIED BY ELI WAKELING
//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

//Sources used: https://www.geeks3d.com/20140213/glsl-shader-library-fish-eye-and-dome-and-barrel-distortion-post-processing-filters/2/
//https://www.shadertoy.com/view/MlSXR3


// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
struct pLight
{
	vec4 center;
    vec3 color;
    float intensity;

};
    
bool initLight(out pLight light, in vec3 center, in vec3 color, in float intensity){
	
    //set light centerpoint and color.
    light.center = asPoint(center);
    light.color = color;
    
    if (intensity > 0.0){
    	light.intensity = intensity;
    	return true;
    }
    //Set Intensity for the user if invalid.
    light.intensity = 1.0;
    return false;

}

float diffuseCoef (in vec3 normal, in vec3 position, in vec3 lightCenter) {
    
    //Calculate Light Vector.
    //vec3 lightVec = position - lightCenter;
    vec3 lightVec = normalize(lightCenter - position);
    //Calculate the diffuse Coefficient;
    float diffuseCoef = max(0.0, dot(normal, lightVec));        
    return diffuseCoef;
    }

float attinuation (in float intensity, in float dist) {
 
   //Establish proper order of opperations.
   float dist1 = dist / intensity;
   float dist2 = (dist * dist) / (intensity * intensity);
   //Find the final Attinuation.
   float att = 1.0 / (1.0 + dist1 + dist2);
   return att;
   
}

vec3 finalColor(in float diffcoef, in float attinu, in vec3 surfaceColor, in vec3 lightColor ){
	
    //Find the final color of the object in lambert.
    float diffIntense = diffcoef * attinu;
    vec3 finalCol = diffIntense * surfaceColor * lightColor;
    
    return finalCol;

}

vec2 distortion(vec2 pix){
    //Create a barrel distortion.
    float theta = atan(pix.y, pix.x);
    float radius = length(pix);
    //Increase the barrel distortion's power without using the "pow" function.
    radius *= radius * radius;
    
    //Apply the distortion. Vec components sepparated due
    pix.x = radius * sin(theta);
    pix.y = radius * cos(theta);
    
    return 0.5 * (pix + 1.0);

}

vec3 rotate(vec3 ray, float rot){
 //Rotate the cube map on the Y axis.
 float sinRot = sin(rot);
 float cosRot = cos(rot);
 return vec3(cosRot*ray.x + sinRot*ray.z, ray.y, -sinRot*ray.x + cosRot*ray.z);
}

    


color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    
    //sCoord loc = vp.uv; // relative to display
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res; // relative to texture (input)
    loc = ratio * loc + 0.1 * iTime; // zoom + shift
    
    ////Base Texture Return.
    //return texture(iChannel0, loc);
    
    //Effect 1.
    
    //float sampledTex = 0.0 + iTime * 0.1;
   
    ////Merge the two textures.
    //return mix(texture(iChannel0, loc), texture(iChannel2, loc), sampledTex);
    
    
    
    //Effect 2.
    
    ////Sepparate the undistorted parts of the image from the distorted.
    //float len = length(vp.viewportPoint.xy);
    
    ////If the pixel is within the distortion zone.
    //if (len < 1.0) {
    ////Run the distortion script.
    //ray.direction.xy = distortion(ray.direction.xy);
    //loc = ratio * loc + 0.1;
    //} 
    //return texture(iChannel0, loc);
    
    //Effect 3.
    
    ////Set up the normals, surface positions, etc.
    vec3 normal = vec3(normalize(vec3(vp.viewportPoint.xy, 1.0)));
    vec3 position = vp.viewportPoint.xyz;
    pLight light1;
    
    float lightPos = -1.0 + (0.1 * iTime);
    
    //Initialize the lights and calculate the distance.
    initLight(light1, vec3(lightPos, 0.3, 4.5), vec3(1.0, 1.0, 1.0), 16.0);
    float dist = length(position - light1.center.xyz);
    
    //Calculate Lambertian Shading.
    float diff;
    diff = diffuseCoef(normal, position, light1.center.xyz);
    float attinu = attinuation(light1.intensity, dist);
    vec3 finalCol = finalColor(diff, attinu, vec3(texture(iChannel0, loc)), light1.color.xyz );
    
    return vec4(finalCol, 1.0);
    
    
    
    ////Effect 4
    ////CUBEMAP samplerCube:
    
    ////Initialize the cube map.
    //vec3 cubeLoc = ray.direction.xyz;
    //float rot = 0.1 * iTime;
    
    ////Rotate the cube.
    //cubeLoc = rotate(cubeLoc, rot);
    
    ////Sepparate the distortion zone from the rest of the image.
    //float len = length(vp.viewportPoint.xy);
    
    ////If the pixel is within the distortion zone.
    //if (len < 1.0) {
    ////Distort the image.
    //ray.direction.xy = distortion(ray.direction.xy);
    //cubeLoc = rotate(cubeLoc, rot);
    //} 
    //return texture(iChannel1, cubeLoc);
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}

//Cubes use a "UV NET" to add texture to its faces.